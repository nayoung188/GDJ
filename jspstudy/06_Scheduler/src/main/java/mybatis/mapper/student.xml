<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace="mapper의 패키지 경로" -->  
  
<mapper namespace="mybatis.mapper.student">


	<!-- 1. 학생 목록 -->
	<select id="selectAllStudents" resultType="Student">
		SELECT STU_NO, NAME, KOR, ENG, MATH, AVE, GRADE
		  FROM STUDENT
		 ORDER BY STU_NO
	</select>
	
	
	<!-- 2. 전체 학생수 -->
	<select id="selectAllStudentsCount" resultType="int">
		SELECT COUNT(*)
		  FROM STUDENT
	</select>
	
	
	<!-- 3. 전체 평균 -->
	<select id="selectAllStudentsAverage" resultType="double">
		SELECT NVL(AVG(AVE), 0)
		  FROM STUDENT
	</select>
	
	
	<!-- 4. 학생등록 -->
	<insert id="insertStudent" parameterType="Student">
		INSERT INTO STUDENT
			(STU_NO, NAME, KOR, ENG, MATH, AVE, GRADE)
		VALUES
			(STUDENT_SEQ.NEXTVAL, #{name}, #{kor}, #{eng}, #{math}, #{ave}, #{grade})
	</insert>
	
	
	<!-- 5. 평균범위조회 -->
	<select id="selectStudentsByAve" parameterType="Map" resultType="Student">
		SELECT STU_NO, NAME, KOR, ENG, MATH, AVE, GRADE
		  FROM STUDENT
		  WHERE AVE >= #{begin} AND AVE <![CDATA[<]]> = #{end}
	</select>
	
	
	<!-- 6. 평균범위조회 : 개수 -->
	<select id="selectStudentsByAveCount" parameterType="Map" resultType="int">	
		SELECT COUNT(*)
		  FROM STUDENT
		 WHERE AVE >= #{begin} AND AVE <![CDATA[<=]]> #{end}
	</select>


	<!-- 7. 평균범위조회 : 평균 -->
	<select id="selectStudentsByAveAverage" parameterType="Map" resultType="double">
		SELECT NVL(AVG(AVE), 0)
		  FROM STUDENT
		 WHERE AVE >= #{begin} AND AVE <![CDATA[<=]]> #{end} 
	</select>
	
	
	<!-- 8. 학생 삭제 -->
	<delete id="deleteStudent" parameterType="int">
		DELETE
		  FROM STUDENT
		 WHERE STU_NO = #{stuNo}
	</delete>


	<!-- 9. 학생 상세 보기 -->
	<select id="selectStudentByNo" parameterType="int" resultType="Student">
		SELECT STU_NO, NAME, KOR, ENG, MATH, AVE, GRADE
		  FROM STUDENT
		 WHERE STU_NO = #{stuNo}
	</select>
	
	
	<!-- 10. 학생 수정 -->
	<update id="updateStudent" parameterType="Student">
		UPDATE STUDENT
		   SET NAME = #{name}, KOR = #{kor}, ENG = #{eng}, MATH = #{math}, AVE = #{ave}, GRADE = #{grade}
		 WHERE STU_NO = #{stuNo}
	</update>


	<!-- 11. 평균 기준 상위 3명 -->
	<select id="selectStudentsTop3" resultType="Student">
		SELECT A.RANK, A.STU_NO, A.NAME, A.KOR, A.ENG, A.MATH, A.AVE, A.GRADE
		FROM (SELECT RANK() OVER(ORDER BY AVE DESC) AS RANK, STU_NO, NAME, KOR, ENG, MATH, AVE, GRADE
		        FROM STUDENT) A
		WHERE A.RANK <![CDATA[<=]]> 3
	</select>

</mapper>